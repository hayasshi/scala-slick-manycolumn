import org.scalatest.BeforeAndAfterAll
import java.sql.Timestamp
import scala.slick.driver.JdbcDriver.simple._

class ManyColumnsSpec extends BaseSpec with BeforeAndAfterAll {

  implicit lazy val session = Database.forURL("jdbc:h2:mem:slicktest", driver = "org.h2.Driver").createSession()

  override def beforeAll(): Unit = {
    Column32Table.query.ddl.create
    Column200Table.query.ddl.create
  }

  override def afterAll(): Unit = {
    Column32Table.query.ddl.drop
    Column200Table.query.ddl.drop
    session.close()
  }

  testWithTime("column32 test") {
    val now = new Timestamp(System.currentTimeMillis())
    val data = Column32(0, true, false, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", Option("hoge"), now, Option(now))
    for (n <- 1 to 1000) {
      Column32Table.query.insert(data)
    }
    println(Column32Table.query.size.run)
    println(Column32Table.query.filter(_.column1 === 5L).firstOption)
    val list = Column32Table.query.list
    println(list.getClass.getName)
  }

  testWithTime("column200 test") {
    val now = new Timestamp(System.currentTimeMillis())
    val data = Column200(
      0,
      true,
      false,
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      Option("hoge"),
      now,
      Option(now)
    )
    for (n <- 1 to 1000) {
      Column200Table.query.insert(data)
    }
    println(Column200Table.query.size.run)
    println(Column200Table.query.filter(_.column1 === 5L).firstOption)
    val list = Column200Table.query.list
    println(list.getClass.getName)
  }
}
